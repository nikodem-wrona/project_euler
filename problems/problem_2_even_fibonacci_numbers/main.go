// TASK:
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

package main

import "fmt"

type result []int64

func main() {
	fibonacciSequence := generateFibonacciSequence()
	result := fibonacciSequence.sumOfEvenNumbers()

	fmt.Println("RESULT : ", fibonacciSequence)
	fmt.Println("RESULT : ", result)
}

func generateFibonacciSequence() result {
	var maxNumber = 1500
	sequence := []int64{1, 2, 3}

	for i := 4; i <= maxNumber; i++ {
		x := i - 3
		y := i - 2

		number1 := sequence[x]
		number2 := sequence[y]

		sum := number1 + number2

		if sum > 4000000 {
			return sequence
		}

		sequence = append(sequence, int64(sum))
	}

	return sequence
}

func (input result) sumOfEvenNumbers() int64 {
	var sum int64

	for _, number := range input {
		if number%2 == 0 {
			sum = sum + number
		}
	}

	return sum
}
